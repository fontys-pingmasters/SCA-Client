name: Build docker image

on:
  workflow_dispatch:
    inputs:
      perform_deploy:
        required: true
        type: boolean
        default: false
        description: 'Deploy to production'

  push:
    branches:
      - develop # For testing
      - main    # For acceptance

  pull_request:
    branches:
      - develop # For PR testing

jobs:
  determine-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Determine Environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.perform_deploy }}" == "true" ]]; then
            echo "Determined environment: production"
            echo "environment=production" >> $GITHUB_ENV
            echo "::set-output name=environment::production"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "Determined environment: acceptance"
            echo "environment=acceptance" >> $GITHUB_ENV
            echo "::set-output name=environment::acceptance"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "Determined environment: testing"
            echo "environment=testing" >> $GITHUB_ENV
            echo "::set-output name=environment::testing"
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "Determined environment: pr-${{ github.event.number }}"
            echo "environment=pr-${{ github.event.number }}" >> $GITHUB_ENV
            echo "::set-output name=environment::pr-${{ github.event.number }}"
          else
            echo "Determined environment: unknown"
            echo "environment=unknown" >> $GITHUB_ENV
            echo "::set-output name=environment::unknown"
        shell: bash

  build-and-push-image:
    needs: determine-environment
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
      IMAGE_TAG: ${{ needs.determine-environment.outputs.environment }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GH_TOKEN }}
      
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: ${{ env.IMAGE_TAG }}

      - name: Create .env file
        run: |
          echo "VITE_BACKEND_URL=${{ secrets.SCA_URL }}" >> ./sca_frontend/sca_frontend/.env
          echo "VITE_BACKEND_SECURE=${{ secrets.SCA_URL }}" >> ./sca_frontend/sca_frontend/.env
          echo "VITE_BACKEND_PORT=${{ secrets.SCA_PORT }}" >> ./sca_frontend/sca_frontend/.env

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: ./sca_frontend/sca_frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: false
